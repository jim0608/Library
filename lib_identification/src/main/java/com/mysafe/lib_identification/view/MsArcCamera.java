package com.mysafe.lib_identification.view;

import android.app.Service;
import android.content.Context;
import android.graphics.Point;
import android.hardware.Camera;
import android.os.Handler;
import android.os.Message;
import android.os.SystemClock;
import android.util.AttributeSet;
import android.util.Log;
import android.view.TextureView;
import android.view.View;
import android.view.ViewGroup;
import android.view.WindowManager;
import android.widget.FrameLayout;

import com.arcsoft.face.AgeInfo;
import com.arcsoft.face.ErrorInfo;
import com.arcsoft.face.FaceEngine;
import com.arcsoft.face.FaceInfo;
import com.arcsoft.face.GenderInfo;
import com.arcsoft.face.LivenessInfo;
import com.arcsoft.face.LivenessParam;
import com.arcsoft.face.enums.DetectFaceOrientPriority;
import com.arcsoft.face.enums.DetectMode;
import com.mysafe.lib_base.expansion.EX_Json;
import com.mysafe.lib_base.sqlite.FaceDatabase;
import com.mysafe.lib_base.sqlite.entity.FaceEntity;
import com.mysafe.lib_identification.camera.DualCameraHelper;
import com.mysafe.lib_identification.camera.FaceRectHelper;
import com.mysafe.lib_identification.camera.ICameraListener;
import com.mysafe.lib_identification.config.PreviewConfig;
import com.mysafe.lib_identification.config.RecognizeConfiguration;
import com.mysafe.lib_identification.enums.LivenessType;
import com.mysafe.lib_identification.enums.RecognizeColor;
import com.mysafe.lib_identification.enums.RequestFeatureStatus;
import com.mysafe.lib_identification.helper.IInitEngineCallback;
import com.mysafe.lib_identification.helper.IRecogniseResultCallback;
import com.mysafe.lib_identification.helper.IRecognizeCallBack;
import com.mysafe.lib_identification.helper.MsArcFaceHelper;
import com.mysafe.lib_identification.helper.MsArcFaceServer;
import com.mysafe.lib_identification.model.CompareResult;
import com.mysafe.lib_identification.model.FacePreviewInfo;

import java.util.ArrayList;
import java.util.Calendar;
import java.util.List;

import static com.mysafe.lib_identification.config.DefaultConfig.*;

/**
 * MS人脸检测摄像头
 */
public class MsArcCamera extends FrameLayout implements IRecognizeCallBack {
    private final String TAG = "TAG_Camera";
    //region 内部控件们
    /**
     * RGB展示页面
     */
    private TextureView tv_RGB = null;
    /**
     * RGB人脸框
     */
    private MsArcFaceRect rv_RGB = null;
    /**
     * IR展示页面
     */
    private TextureView tv_IR = null;
    /**
     * RGB人脸框
     */
    private MsArcFaceRect rv_IR = null;

    MsArcRecognizeArea recognizeAreaView;
    //endregion

    //region Camera操作
    private DualCameraHelper rgbCameraHelper;
    private DualCameraHelper irCameraHelper;
    private FaceRectHelper rgbFaceRectHelper;
    private FaceRectHelper irFaceRectHelper;

    //不同设备镜头拍摄左右是否翻转
    private boolean switchCamera = false;

    private final int CAMERA_START = 0x01;
    //endregion

    //region 接口实现
    private IRecogniseResultCallback recogniseCallback;

    public void ImpRecogniseResultCallback(IRecogniseResultCallback callBack) {
        this.recogniseCallback = callBack;
    }
    //endregion

    //region 构造方法
    public MsArcCamera(Context context) {
        super(context);
        initFrameLayout();
    }

    public MsArcCamera(Context context, AttributeSet attrs) {
        super(context, attrs);
        initFrameLayout();
    }

    public MsArcCamera(Context context, AttributeSet attrs, int defStyleAttr) {
        super(context, attrs, defStyleAttr);
        initFrameLayout();
    }

    public MsArcCamera(Context context, AttributeSet attrs, int defStyleAttr, int defStyleRes) {
        super(context, attrs, defStyleAttr, defStyleRes);
        initFrameLayout();
    }
    //endregion

    /**
     * 摄像头类型_Rgb摄像头
     */
    public static final int CameraType_RGB = 1;
    /**
     * 摄像头类型_活体摄像头
     */
    public static final int CameraType_IR = 2;

    //region 控件操作
    private void initFrameLayout() {
        this.tv_RGB = new TextureView(this.getContext());
        this.tv_RGB.setLayoutParams(GetDefaultLayoutParams());
        this.addView(this.tv_RGB);

        this.rv_RGB = new MsArcFaceRect(this.getContext());
        this.rv_RGB.setLayoutParams(GetDefaultLayoutParams());
        this.addView(rv_RGB);

//        this.tv_IR = new TextureView(this.getContext());
//        this.tv_IR.setLayoutParams(GetDefaultLayoutParams());
//        this.addView(this.tv_IR);
//
//        //人脸识别框
//        this.rv_IR = new MsArcFaceRect(this.getContext());
//        this.rv_IR.setLayoutParams(GetDefaultLayoutParams());
//        this.addView(rv_IR);
    }

    private LayoutParams GetDefaultLayoutParams() {
        return new FrameLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT);
    }

    /**
     * 调整View的宽高，使2个预览同时显示
     *
     * @param previewView        显示预览数据的view
     * @param faceRectView       画框的view
     * @param previewSize        预览大小
     * @param displayOrientation 相机旋转角度
     * @return 调整后的LayoutParams
     */
    private ViewGroup.LayoutParams AdjustPreviewViewSize(View previewView, MsArcFaceRect faceRectView, Camera.Size previewSize, int displayOrientation, float scale) {
        ViewGroup.LayoutParams layoutParams = previewView.getLayoutParams();
        int measuredWidth = previewView.getMeasuredWidth();
        int measuredHeight = previewView.getMeasuredHeight();
        float ratio = ((float) previewSize.height) / (float) previewSize.width;
        if (ratio > 1) {
            ratio = 1 / ratio;
        }
        if (displayOrientation % 180 == 0) {
            layoutParams.width = measuredWidth;
            layoutParams.height = (int) (measuredHeight);
//            layoutParams.height = (int) (measuredWidth * ratio);
        } else {
            layoutParams.height = measuredHeight;
            layoutParams.width = (int) (measuredWidth);
//            layoutParams.width = (int) (measuredHeight * ratio);
        }
        layoutParams.width *= scale;
        layoutParams.height *= scale;

        //屏幕适配，根据屏幕的dpi（密度），将preview的宽高设置出来
//        DisplayMetrics metrics = new DisplayMetrics();
//        GetWindowManager().getDefaultDisplay().getMetrics(metrics);
//        if (layoutParams.width >= metrics.widthPixels) {
//            float viewRatio = layoutParams.width / ((float) metrics.widthPixels);
//            layoutParams.width /= viewRatio;
//            layoutParams.height /= viewRatio;
//        }
//        if (layoutParams.height >= metrics.heightPixels) {
//            //metrics.heightPixels这个的高度是除去了导航栏，状态栏的高度，如屏幕1080，这儿就是1020
//            float viewRatio = layoutParams.height / ((float) metrics.heightPixels);
//            layoutParams.width /= viewRatio;
//            layoutParams.height /= viewRatio;
//        }
        previewView.setLayoutParams(layoutParams);
        faceRectView.setLayoutParams(layoutParams);
        return layoutParams;
    }

    /**
     * 绘制RGB、IR画面的实时人脸信息
     *
     * @param facePreviewInfoList RGB画面的实时人脸信息
     */
    private int faceSize = -1;

    private void DrawPreviewInfo(List<FacePreviewInfo> facePreviewInfoList) {
        if (rgbFaceRectHelper != null) {
            List<MsArcFaceRect.DrawInfo> rgbDrawInfoList = GetDrawInfo(facePreviewInfoList, LivenessType.RGB);
//            Log.i("TAG_faceSize",rgbDrawInfoList.size()+"");
            if (faceSize != rgbDrawInfoList.size()) {
                faceSize = rgbDrawInfoList.size();
                recogniseCallback.onFaceSearch(rgbDrawInfoList.size() > 0);
            }
            this.rv_RGB.DrawRealtimeFaceInfo(rgbDrawInfoList);
        }
        if (irFaceRectHelper != null) {
            List<MsArcFaceRect.DrawInfo> irDrawInfoList = GetDrawInfo(facePreviewInfoList, LivenessType.IR);
            this.rv_IR.DrawRealtimeFaceInfo(irDrawInfoList);
        }
    }

    //endregion
    //region 自定义数据，将数据插入数据库
    public void InsertFaceInfo(Context context) {
//        String jk = "[{\"faceId\":10,\"featureData\":[0],\"imagePath\":\"/storage/emulated/0/Android/data/com.arcsoft.arcfacedemo/files/Pictures/faceDB/registerFaces/registered_79_1607926601818.jpg\",\"registerTime\":1607926601946,\"userName\":\"registered_79\"}]";
//        String jk = "[{\"faceId\":10,\"featureData\":[0,-128,-6,68,0,0,-96,65,-58,-4,5,-69,77,-85,34,61,-69,102,-65,-67,32,12,-56,60,-113,-107,11,61,21,39,76,-68,-38,22,-37,-68,15,-40,38,-68,43,-127,49,59,-47,-106,113,-68,5,76,110,-68,-93,-51,84,61,-43,-104,102,-67,74,113,24,61,-47,117,-41,-70,112,-13,-76,-68,-20,-79,44,60,-95,-62,91,61,83,-20,-24,-68,94,28,57,61,-32,101,21,-67,28,124,-28,60,-23,120,49,61,93,28,41,-67,19,57,21,61,-6,44,-72,59,41,36,-123,-71,44,1,-27,-68,55,-126,84,61,-97,-31,-2,-67,-63,-1,-126,61,-94,-1,-19,61,23,85,-28,-67,125,116,12,-67,-44,-39,18,-67,48,-111,-119,-68,77,67,-25,-68,-14,-26,36,62,33,71,-64,61,87,-80,28,-66,-21,-85,-102,-69,42,-73,-107,61,-3,121,83,60,-86,117,52,61,105,7,-63,58,122,95,-80,-67,23,-7,-33,61,-29,51,122,-68,62,27,127,-67,-66,-80,81,61,105,-84,11,60,-62,104,24,-66,-36,76,-24,-67,-105,-42,-119,-68,-35,98,28,61,-28,91,76,61,15,35,-19,61,-70,8,-112,60,-27,27,116,61,-91,118,55,59,15,-67,45,-67,0,104,-85,-68,-42,-76,-70,-68,64,-84,-60,-67,-91,49,4,60,43,-29,-16,60,9,-25,19,62,9,-57,122,61,2,-81,88,-68,-43,-87,-61,-71,-102,6,123,-67,44,45,71,61,-64,-56,11,62,49,13,-120,61,109,38,-75,-69,-106,1,28,-67,125,91,-99,61,118,59,-91,-67,-82,123,62,-67,32,29,-104,61,-37,-74,71,61,-29,-83,-77,-68,103,-75,-121,-67,117,108,64,61,-55,66,35,-67,-103,23,-126,61,-110,59,-115,-67,18,-1,22,62,9,90,7,61,113,-106,-102,61,-48,85,22,-66,-35,108,-28,61,4,-110,-93,-68,-89,-22,-110,61,28,8,-111,61,-6,38,-13,-68,12,-22,-100,-67,39,-30,-1,-68,98,24,-115,-67,118,-51,107,60,18,70,106,60,-116,17,-80,-67,83,-17,-62,-68,-12,118,30,-67,47,97,38,-66,-41,65,-74,60,-95,47,122,61,-57,-77,-96,61,-90,-10,-66,-67,14,16,89,61,-36,-119,-79,-67,-35,55,-92,-68,-43,-10,101,-67,12,-57,109,-68,-52,-78,75,62,25,111,120,61,112,-45,-89,-68,-117,-60,-87,59,-127,-56,55,60,-91,83,67,61,47,-124,51,-69,-12,-8,-106,-67,121,53,-84,60,-100,59,55,-68,-32,-23,65,-68,-60,-10,6,-66,64,-41,35,-66,-50,-58,64,62,-81,-35,-63,60,-77,117,59,61,55,117,-83,-69,-55,-83,115,-67,81,46,-108,61,33,102,-60,60,54,81,-118,-67,-106,121,7,60,94,9,23,-67,-55,31,40,-71,-83,4,9,-67,-61,63,-36,59,-96,59,64,-67,-60,48,-46,-69,31,96,79,-67,38,85,42,-67,31,95,37,-67,-32,44,101,61,13,99,24,60,-13,11,116,-67,117,-117,-51,61,47,-48,12,-67,-111,106,13,-66,78,-54,121,61,69,-33,22,-68,35,17,-43,-67,50,-38,21,-67,-123,2,88,-67,65,14,-120,-68,27,-108,-35,61,60,109,8,-67,-107,80,37,61,81,24,23,-67,-82,-114,-105,61,103,-97,-7,-69,53,-2,-12,61,2,-62,60,-67,14,-72,-125,61,-15,-11,11,60,113,-74,-92,-68,-12,21,48,-67,90,-128,-123,-67,-127,-9,-74,61,-115,85,82,61,81,-115,34,61,-101,-21,86,-68,25,-23,-20,-68,81,-92,-51,61,39,-86,57,59,-76,73,14,58,68,75,-101,60,106,-93,-71,-68,-103,8,37,60,56,-30,-124,61,-54,75,90,-68,-17,28,-115,60,18,100,-20,61,-116,-81,69,61,-79,79,-127,61,-109,8,126,61,-62,-55,-102,-68,-96,17,-39,-68,-1,52,-67,60,90,-81,-103,-68,121,87,7,61,-41,-83,-81,60,-99,-110,57,61,31,55,101,-67,-85,-123,-14,-68,21,-119,-85,-67,-96,-1,-75,-67,82,119,-57,-67,9,-95,-81,60,55,-45,106,-67,-67,-111,-76,-67,-69,93,93,61,94,68,80,-67,-22,48,-17,-68,57,-115,-76,61,-37,-30,35,-68,71,-48,22,61,48,-12,-17,-67,59,-98,23,-69,46,-40,122,-67,6,-1,14,60,-2,41,-11,-67,-89,101,-62,61,80,44,-55,-68,-41,73,61,61,27,55,80,-68,-43,-4,114,60,115,72,70,61,-17,-124,83,-68,-95,-18,-46,61,-26,-35,116,-68,68,-17,-13,-67,30,97,-123,-67,93,-90,4,60,119,-56,11,61,53,12,26,62,20,-113,-92,61,11,-114,26,59,-73,125,-28,61,-125,-108,46,-68,-39,96,-113,61,57,107,33,61,53,-118,-94,-67,-65,108,-82,61,-33,50,-68,60,-106,91,113,61,114,-7,-99,-68,6,-7,-111,-67,-36,20,-38,61,100,-117,19,61,-113,38,-49,61,51,61,-61,-67,-93,99,92,-67,-51,-1,-86,61,-66,16,24,-67,-82,65,-53,61,74,-74,78,61,-39,-49,-33,-67,-50,41,0,61,92,-104,65,-67,-50,69,-125,61,-21,-98,-79,-67,-23,-90,-113,60,19,-82,34,61],\"imagePath\":\"/storage/emulated/0/Android/data/com.arcsoft.arcfacedemo/files/Pictures/faceDB/registerFaces/registered_79_1607926601818.jpg\",\"registerTime\":1607926601946,\"userName\":\"registered_79\"},{\"faceId\":9,\"featureData\":[0,-128,-6,68,0,0,-96,65,42,18,-54,61,-7,41,72,-67,1,-95,-42,60,-10,20,-77,59,43,-49,-53,-68,91,-45,79,-68,-55,-97,35,60,5,-33,-117,60,-15,49,79,-67,81,44,-88,61,-14,80,-79,-67,-77,16,-116,61,-91,-44,-101,61,67,122,-95,60,25,75,83,-67,-128,-68,84,61,125,48,2,62,64,63,-31,-68,42,101,91,61,23,-12,-50,58,18,72,87,-67,33,-102,-60,-69,-30,-43,70,-67,-98,-92,115,-67,87,-59,-11,-67,27,-103,78,-67,90,95,64,59,106,73,47,-68,127,-53,-3,61,70,54,-109,-67,-59,78,-51,61,120,-11,79,-69,89,103,97,61,23,-102,25,60,125,96,55,-67,-107,-55,-18,59,74,73,82,-68,71,-126,-118,-67,-43,81,95,61,-17,64,-100,-67,50,-66,118,-67,-31,73,28,62,25,8,-85,-68,57,98,15,-66,77,-49,-120,-67,-24,-107,69,60,-63,54,28,-66,-73,-120,124,61,35,33,65,-67,-109,6,-86,-67,-96,95,126,-68,17,0,33,-68,-46,-45,-77,-67,-106,-31,12,61,-62,-26,56,-67,117,-98,-65,59,55,89,-84,-70,89,119,-61,61,-39,-25,125,-67,-7,37,-113,60,-23,55,-56,-67,-107,-110,-122,-67,106,29,-116,-67,-96,-98,42,60,-39,-20,-43,61,-37,118,-122,-68,18,-2,4,62,-11,69,23,-66,107,35,59,61,7,50,22,-67,11,18,119,61,-79,-113,-93,60,73,-15,20,-66,-118,-25,-32,-68,-51,91,63,60,-40,13,-63,-67,-102,-37,40,60,102,-84,-126,61,118,-46,-95,-68,33,-31,-1,-68,-2,-88,40,-66,-109,81,-87,61,111,124,102,-68,-37,-4,-66,61,78,26,24,-67,39,-123,-60,-68,-79,-29,69,-67,-120,-27,97,60,-71,-60,-125,-67,117,-59,-128,-67,-87,62,29,-66,-26,-123,-122,-68,-40,-70,-38,60,-68,-21,16,60,67,23,-125,60,66,74,-110,60,-128,59,-14,-68,-96,-68,56,-67,-38,38,-81,60,18,-61,65,61,125,57,-35,60,-6,40,-44,-68,-90,13,-45,60,31,-3,-111,61,66,-109,91,61,105,-110,-95,61,74,35,90,-67,-128,51,-84,60,-66,-112,-51,61,8,-81,-83,-67,46,34,20,-67,-62,60,-112,-67,-112,-51,-121,61,-101,94,-75,-69,127,-116,120,61,-65,-73,114,-67,97,-22,-85,-68,72,-35,23,-68,-30,30,26,61,-15,-126,88,60,-39,-59,-47,61,-93,-108,65,62,119,-120,-12,-67,-34,71,88,59,-113,12,-81,-68,-43,-61,86,59,97,-115,114,-68,-85,-48,19,61,-49,39,-118,59,21,-20,-119,-68,-2,82,28,-68,6,-15,36,-67,-110,0,11,-66,-81,-48,-81,59,-99,-106,34,60,31,110,-116,61,-3,-11,89,-67,26,-30,-14,-69,63,-86,-43,61,-26,122,-109,-68,-94,77,79,-67,-14,-69,-120,-67,-63,27,-47,-67,-62,-18,22,61,-21,115,-91,-68,-89,12,-37,60,-26,-33,-91,61,-80,-10,126,-67,-95,66,-79,-68,-75,-36,-85,59,102,0,-118,-67,7,112,-50,-68,113,5,43,61,-69,-87,-37,56,1,121,-109,61,11,117,-102,-67,-29,66,6,60,-40,-107,114,-67,-57,-25,-72,-67,-39,-27,-111,-67,-101,67,45,-67,120,-93,-94,61,-58,-100,1,-67,-114,-52,-30,-68,119,-73,-99,59,73,64,-106,-68,58,81,2,-67,106,-47,32,-68,83,111,15,61,56,-68,-120,61,-39,-6,41,-69,-24,-96,-67,-68,-114,36,67,-69,49,-14,-68,-67,-13,-9,-122,-67,45,117,65,61,47,-95,41,61,-70,-97,-95,61,13,22,-81,-67,86,-75,85,-67,98,25,30,59,64,67,127,-67,4,51,-122,-67,111,-107,56,61,87,50,13,62,54,-13,44,59,98,82,-98,61,48,82,-114,59,-82,31,35,-67,-119,-94,-44,60,101,4,125,61,-87,-22,-37,59,10,-14,11,61,-101,41,31,-67,64,-71,42,-67,-58,127,-115,61,-59,-38,22,62,95,58,99,61,-7,70,-69,-68,35,-71,125,-67,34,38,-33,61,85,4,-124,-67,115,-87,76,-67,113,83,99,-67,0,-83,-56,-67,-43,-38,-110,60,119,-26,13,-67,103,23,-17,60,-127,-83,-65,-67,22,63,126,-67,-75,-100,44,61,89,-25,44,-68,13,28,-121,-68,-23,-123,4,61,85,-127,-63,-70,122,-50,-67,-68,-121,-107,118,-69,16,-27,-125,-67,-89,-119,113,-67,-98,-46,-48,-70,125,29,-16,61,-3,27,27,-67,63,-63,-110,-68,127,46,5,61,105,-90,-19,56,-72,-110,-90,60,-39,127,-83,61,-125,79,-79,-68,31,-11,3,61,87,67,119,60,110,126,-29,60,-7,-33,-108,61,-104,65,-29,-67,-73,33,90,-68,1,-58,-124,-67,-121,117,72,-67,86,39,-125,61,-111,122,-124,-67,43,0,-71,61,126,25,18,61,-119,-13,-91,61,-47,-62,43,61,77,15,-123,-67,-110,-97,-58,60,-43,108,-52,61,16,89,69,-67,13,52,42,-67,42,3,-115,-68,-64,-126,-112,61,-120,5,-81,-67,25,-84,47,-67,-63,57,-64,-67,-110,108,34,61,78,-49,-10,61,-11,117,-97,61,25,-125,13,-66],\"imagePath\":\"/storage/emulated/0/Android/data/com.arcsoft.arcfacedemo/files/Pictures/faceDB/registerFaces/registered_69_1606362201369.jpg\",\"registerTime\":1606362201389,\"userName\":\"registered_69\"},{\"faceId\":6,\"featureData\":[0,-128,-6,68,0,0,-96,65,-80,-48,-83,61,-105,-71,-29,-67,31,84,-92,-67,92,48,8,-67,-84,107,2,61,-57,125,29,61,96,-84,-63,61,-126,126,82,-67,26,-51,115,61,17,109,-103,60,65,-115,126,60,58,-93,-88,-67,105,-38,-87,-67,29,26,-22,61,83,48,-1,-67,5,42,56,-67,22,41,90,61,109,-45,9,-67,64,-91,-3,61,118,-24,-73,61,-91,-45,-104,60,-30,91,-42,60,-39,118,3,60,-116,32,73,-67,-82,78,7,-67,4,27,-17,61,116,2,-108,-67,-74,-60,-70,-69,123,-91,-128,61,119,-94,-68,-68,-54,26,20,-67,-114,30,19,-66,-56,-49,86,61,-8,-126,-2,60,-85,-122,45,61,-115,-126,-111,61,-46,-111,-54,61,-63,-60,-94,61,74,124,47,-68,37,-32,44,61,17,-68,-116,-67,-78,-114,-1,61,-66,30,-92,61,-115,111,-110,-71,-56,-92,47,61,-109,33,-52,59,-110,-1,-49,58,46,-85,36,-67,50,6,-40,60,50,-122,-28,61,61,55,-113,60,-88,-29,77,-67,26,-26,-91,-68,104,-117,-128,60,114,-36,-117,-68,-37,61,-28,60,64,-106,120,-68,75,58,22,-67,-39,-101,-2,-68,-89,121,-79,-67,112,-110,-113,59,-128,-121,-79,-67,123,0,-79,-67,4,-23,-66,61,97,-114,1,-66,-27,81,-81,-69,-21,-117,13,-67,-36,69,-125,-67,19,-98,-47,61,-121,59,-20,-68,-7,-17,18,61,-113,-43,15,-69,-84,-27,8,61,13,-33,60,61,-27,105,-64,60,-92,-124,-101,-68,28,-109,45,60,52,124,-115,-68,-87,23,-93,61,56,-114,-25,-67,-114,31,101,59,-11,-23,22,-69,76,7,112,58,81,11,14,-67,-124,-128,118,61,-90,61,97,61,-60,-79,61,61,-119,-119,-110,61,-65,-105,-68,61,84,-93,-97,61,-115,-40,-36,-67,-15,70,69,-67,-20,-75,28,-67,58,-121,-49,60,-5,-66,98,61,12,-116,-94,-67,3,-46,-93,60,124,42,-79,61,-92,84,-29,-68,117,-63,108,-69,20,38,-77,-69,-87,21,76,-67,121,63,25,61,84,-30,-87,59,24,-65,72,57,92,-79,3,-68,59,-12,20,60,57,42,-8,-67,12,34,-124,61,36,5,21,62,100,-96,20,-67,39,-42,45,-67,-44,-104,-121,61,7,64,97,-67,-23,-114,-69,61,-32,29,48,-67,62,20,57,62,-66,-122,-50,-69,8,-7,-80,-67,112,90,111,61,-118,72,-83,60,103,44,70,-70,-34,83,-93,-67,19,43,112,60,113,95,-47,-67,-14,-41,5,-68,103,31,-18,-67,69,-103,26,62,117,56,25,-67,100,5,29,61,89,-45,-122,-67,-2,-111,17,-66,-39,24,-102,61,123,-59,117,-69,91,-39,-72,60,59,114,-22,-69,-15,-122,-106,-67,-12,84,-116,60,-55,117,-46,61,38,63,-2,61,102,-76,18,-67,88,80,81,61,56,51,-119,61,116,47,74,61,-92,82,118,61,0,-54,110,-67,-2,27,-36,60,-46,83,53,60,-77,72,16,59,-101,46,-128,-67,110,1,-118,-69,-90,-15,74,-67,55,-96,21,-67,81,127,4,61,-14,-42,39,-67,1,103,-97,60,84,0,40,-68,-25,10,54,-67,-122,9,29,-67,82,116,-126,-67,103,50,-119,61,28,-58,-65,-69,-126,-125,-95,60,111,116,60,-67,-36,-105,81,61,-61,53,91,61,-71,87,16,-68,44,-46,-84,-67,-70,-90,-24,61,86,-105,33,-66,107,-52,37,-67,4,-92,5,61,-77,8,45,-68,-108,-106,-86,-71,-8,95,39,61,18,-63,-71,-67,82,-116,-13,58,98,-51,73,61,-106,103,-61,-67,80,-32,-71,60,-40,71,96,61,-77,82,81,-68,60,-55,-124,61,55,-8,-119,61,-106,-35,61,-67,92,112,-59,61,52,-74,-63,-67,-9,57,99,61,117,55,-116,60,-103,-98,-30,60,15,-32,12,60,17,119,15,61,76,-45,77,61,-30,52,35,59,-31,52,-102,-67,-15,27,-18,-67,9,93,21,-69,-116,-47,47,61,-112,-121,-52,-67,-86,81,-38,57,-46,-120,-72,-68,-44,-105,69,-67,57,89,-114,-67,-54,43,85,60,-56,69,-92,61,115,89,-93,-68,101,95,-41,-67,-32,84,-108,61,-23,-75,-58,-67,115,78,-54,-67,78,68,88,-68,-5,18,94,61,33,-94,-75,-67,-20,58,69,61,39,-43,-50,-67,-114,-20,105,-67,-48,114,73,61,102,-42,126,-67,127,19,4,62,95,-17,3,59,-46,115,-75,61,14,42,45,-68,-26,95,-93,-67,76,2,-50,-68,-124,-49,22,-66,-99,107,112,61,101,-41,-113,-68,-6,102,-78,-68,127,120,-63,-68,-10,0,28,62,-10,-45,-99,60,89,-68,-55,60,-114,65,-124,61,76,-26,31,61,-78,77,66,61,-89,8,-122,60,76,124,-123,-67,27,26,72,-67,126,-43,-126,60,-57,-108,-111,61,-41,-97,88,-67,32,-108,-107,61,-123,3,-48,-67,33,101,89,60,-41,126,-127,61,91,-73,-63,61,-97,-16,6,62,-51,69,-116,60,33,-90,4,61,-34,-125,-8,-68,18,35,31,-67,-48,75,42,61,-26,100,-106,-68,-102,-26,15,-69,-111,-52,46,-68,-32,75,-102,61],\"imagePath\":\"/storage/emulated/0/Android/data/com.arcsoft.arcfacedemo/files/Pictures/faceDB/registerFaces/registered_23_1606288291272.jpg\",\"registerTime\":1606288291333,\"userName\":\"registered_23\"},{\"faceId\":4,\"featureData\":[0,-128,-6,68,0,0,-96,65,-82,77,73,-67,92,-70,-13,-67,89,-46,-100,60,113,65,122,-67,-96,44,43,-67,113,-42,-87,61,1,-107,-51,58,42,-109,-57,-69,46,-28,-112,-67,-67,32,-120,61,50,31,105,62,-55,10,57,-67,66,-47,47,61,46,-41,-90,-68,-75,78,-50,-69,-52,-126,-75,60,-7,75,-26,58,120,-38,44,-67,5,-42,-19,-68,47,42,-114,59,-91,125,-67,61,-10,-29,67,-67,-7,24,-85,-69,-114,-25,126,60,98,125,-92,60,40,74,-104,60,-33,-58,70,59,89,-125,35,61,92,53,-58,59,-62,-108,-73,61,-128,122,107,59,57,-49,-60,59,77,-116,117,61,18,4,-113,-67,-58,49,80,61,32,43,-85,60,113,3,4,62,-34,-113,-72,61,-71,-26,82,-68,-71,-50,-67,61,57,-34,-48,61,115,-4,-38,-67,15,-57,-59,59,-106,-23,-120,-68,-110,50,18,61,35,-19,-56,-67,-78,22,44,60,-15,-127,0,61,-63,85,66,61,-101,68,-42,-68,80,-21,-128,-67,-22,-12,88,59,-9,-76,38,62,17,-126,-104,61,-3,-1,-26,59,29,-59,125,61,88,116,-62,-67,-118,36,-10,-68,63,0,2,60,-111,-21,106,60,-4,46,107,-67,-97,16,54,-68,37,9,43,-67,-85,113,68,-67,33,78,-37,-69,-57,116,120,60,-34,7,39,61,18,65,12,-66,-21,88,-15,-69,82,103,26,60,-122,-24,-72,59,-48,125,8,60,-30,-122,53,61,80,126,-52,60,36,21,83,-69,-89,-16,116,61,-92,-128,-2,-67,20,43,-49,-68,-124,-34,117,61,-38,40,106,59,65,122,104,-67,-116,80,-17,59,-71,36,-8,61,83,-74,-76,61,100,97,31,60,-63,-12,83,-67,95,67,58,61,-4,76,51,61,5,-75,-75,59,-124,-38,10,62,89,126,114,-67,46,55,48,61,-42,78,80,-68,55,-103,21,61,-103,44,-58,-69,-2,80,-60,-67,23,101,-44,61,77,19,6,61,114,-42,-8,61,48,-36,3,62,-119,13,96,60,20,23,100,60,-27,-51,-97,60,106,-66,110,-67,-112,-128,-73,60,45,-94,-41,-67,124,-82,113,-67,25,24,81,61,102,103,-121,61,124,44,-50,60,3,73,7,61,21,-10,5,61,112,19,-102,60,78,52,4,61,7,118,-48,61,-74,38,-111,-67,-122,123,48,61,72,11,-32,61,-25,95,-39,-68,78,58,80,61,78,-116,-28,-68,-14,70,-110,-67,118,-22,1,62,79,-111,124,60,40,-28,0,61,87,16,-10,60,25,-111,-30,-67,1,-68,11,62,-80,40,-9,-67,-44,-49,57,60,-86,44,-36,60,-39,49,101,-67,15,124,-83,-67,119,-18,58,61,23,41,-118,61,90,-127,-120,-67,-97,43,-3,-67,-44,75,-42,61,-34,115,20,61,-113,119,-94,61,29,103,-19,-68,-70,73,103,-68,13,107,-127,61,-125,74,-93,-68,-58,110,2,60,-72,-109,35,-67,-91,-112,-91,-67,122,-105,-117,-69,29,-57,-119,-67,37,5,-94,-68,-93,6,-125,-67,44,-100,6,-66,45,-13,-51,61,-109,-17,125,-67,61,-95,-12,60,-7,-93,38,-67,-60,16,-10,-69,-122,9,-14,60,-80,74,-128,61,-103,19,53,61,113,-113,78,60,-114,-80,86,61,-11,114,-34,-69,11,-52,-125,61,50,42,-26,-68,-114,81,41,61,-55,63,-122,61,-87,43,-97,61,-100,-104,-96,-69,124,30,-6,-69,-37,30,118,-67,-86,-58,-21,60,94,-99,-99,-69,26,109,43,59,-33,12,16,-66,-84,50,70,-67,54,-23,-128,-68,25,56,-2,-68,36,-114,44,60,-111,-103,-106,-67,-23,11,0,-66,50,82,6,-66,44,103,-118,60,115,58,-93,61,-38,-43,-117,-68,100,-73,-116,60,65,42,-5,-67,127,-57,-122,-67,-76,-93,51,-67,-112,-107,25,-66,-119,102,-96,-68,-35,5,-94,-67,-125,19,-7,-67,18,21,28,-67,-32,49,80,61,36,30,-128,60,-8,-6,54,-67,-102,112,-85,61,119,104,-126,61,8,-123,2,-67,-70,-103,-34,-68,63,88,-87,-67,4,73,-53,-68,-44,26,27,61,6,26,-115,61,2,-75,-14,-68,55,25,-1,-67,0,89,-72,-69,-123,14,92,60,61,48,9,-68,74,-95,84,61,-12,-82,-113,-69,29,82,-123,-67,-43,9,39,62,50,-62,43,-67,-61,-67,-84,-67,107,-12,120,-67,-54,23,18,-71,-109,70,-101,60,-63,9,9,62,105,122,111,-67,91,-44,78,61,15,121,-122,60,-79,-115,-38,-68,95,118,-124,-67,-32,8,35,-66,80,9,109,59,-22,99,104,-67,-72,37,-101,60,-127,56,-121,60,-19,24,84,61,-124,39,-35,61,-69,8,-25,-67,115,3,28,-67,-8,63,-110,60,71,-123,89,-69,-16,-67,48,61,54,25,50,62,-100,-78,-55,-68,76,18,26,-67,66,-127,57,61,-66,50,-82,-67,-37,-54,2,-67,-77,-12,-48,-67,79,19,-42,-69,19,1,-13,-68,-85,-2,36,-67,49,124,-24,-67,5,4,19,61,-33,-97,-48,58,114,22,-115,-67,-32,52,-75,-68,72,94,-127,61,67,1,64,-67,-92,46,7,-67,-84,-49,-53,61],\"imagePath\":\"/storage/emulated/0/Android/data/com.arcsoft.arcfacedemo/files/Pictures/faceDB/registerFaces/registered_21_1606288283684.jpg\",\"registerTime\":1606288283748,\"userName\":\"registered_21\"}]";
        String jk = "[{\"faceId\":1,\"featureData\":[0,-128,-6,68,0,0,-96,65,1,-85,35,59,118,-101,90,61,-57,116,-60,61,-47,-48,-16,-67,-18,11,6,62,111,83,-128,-68,18,42,-29,-67,5,96,-79,60,87,121,19,62,85,-82,99,60,120,29,-110,60,-60,112,-110,60,-102,-70,18,62,-12,-46,-76,-69,-44,-44,-124,61,36,79,-125,-67,68,-63,80,61,-110,-70,5,-67,25,43,50,-67,43,-73,-120,-68,54,-120,-42,59,85,-18,39,-69,54,49,97,-67,-59,110,-75,60,68,-31,13,-67,-54,13,112,-67,-117,125,-79,-67,17,-65,33,-67,-95,-87,-116,60,-81,84,-66,61,-23,66,118,-68,23,25,12,-68,103,97,-109,-68,18,-124,-60,-68,48,63,-83,-67,-73,-54,113,61,-42,-52,-82,61,-12,23,48,61,18,-113,-63,61,-27,-34,67,61,-31,19,36,62,-74,-40,14,-66,31,-92,-83,60,-102,123,-64,-67,97,-51,8,-66,96,44,58,-68,119,-86,87,59,-118,8,121,61,100,120,-74,61,97,53,120,-67,33,90,55,61,-111,94,25,-67,-95,9,9,-67,-24,-94,-125,61,-75,21,-85,61,-39,-99,86,-67,-100,-50,-107,61,-122,-94,22,-67,-92,-75,-57,-68,-9,-63,-121,61,-28,40,-112,61,-59,-105,-126,61,125,20,-109,-67,-36,109,34,-68,-126,10,28,-66,-39,-40,78,61,-65,36,-81,-67,-55,29,-46,61,-85,-1,-121,-68,-71,-40,85,61,-116,-47,-110,-67,-117,112,6,-66,50,17,-80,60,-2,94,11,-67,12,38,-72,58,98,-46,-85,-67,126,124,37,62,8,100,24,-67,47,18,-68,60,92,111,117,61,-94,76,-22,-70,-84,-32,16,62,-85,5,40,-67,76,-58,19,-66,-6,73,-68,61,18,-103,-58,59,112,37,-41,-67,-118,-26,5,61,-71,42,-122,-67,12,96,-33,-69,117,-46,77,61,119,-56,-105,-67,17,26,18,-68,84,33,53,61,127,-33,-115,61,-127,114,-125,61,60,70,-104,59,-89,-6,112,-67,119,72,86,-69,122,8,-112,61,-82,7,19,62,-31,53,-26,61,2,82,59,61,-79,29,-93,-67,-94,64,66,61,49,38,27,-66,65,-56,-23,-67,7,-53,105,61,43,-76,74,-67,-117,-103,61,-67,6,-3,31,-67,-28,123,12,-66,-123,81,-10,60,78,40,-98,61,10,45,-128,-67,-65,-29,60,61,-94,-76,65,-67,-103,-31,122,61,120,-65,11,-67,-34,-38,-116,-68,93,-32,-102,61,39,-15,62,60,-96,-53,120,60,98,-99,45,61,43,95,85,61,-127,-119,-38,-68,-119,98,-95,60,23,-16,-46,59,-89,-79,-77,59,34,-89,-111,-67,81,54,-73,61,38,-59,-88,-67,-87,-47,120,61,-16,-51,-80,-69,-110,126,19,61,70,-29,-1,-68,9,-13,-24,61,-56,-48,21,60,5,126,-62,-69,-14,45,-111,-67,-39,120,-112,61,15,-67,17,61,85,49,-23,61,-16,-115,40,-67,-57,117,63,61,-38,34,-91,60,-27,66,-91,61,-70,-61,-61,-69,-18,89,78,-67,125,67,16,-66,105,68,-21,-68,79,-17,30,60,-69,113,-97,-67,-47,20,-103,60,-121,-86,-7,61,54,14,101,61,-51,85,-121,-67,-55,-33,-84,-67,-87,-66,59,61,-28,-90,112,-68,7,113,-24,-69,32,-104,-2,60,12,105,-52,-68,89,-61,1,-71,-33,95,-6,-67,-124,-89,33,-66,20,-26,-44,59,-15,-89,12,61,123,45,-88,-69,-110,-82,-68,60,-41,-41,82,61,-74,-103,117,61,-26,4,-89,60,-83,-64,-127,-67,-33,-105,108,60,-23,44,-76,-67,-100,-77,126,-67,-59,-35,-74,-68,113,-43,23,61,-126,67,11,-67,-106,75,98,-70,70,-63,79,61,-65,101,119,-67,-7,36,13,-67,9,-62,-90,60,8,-99,-127,61,-55,-118,95,60,-121,17,-86,60,125,-28,-123,61,96,22,26,61,9,-110,-20,-67,9,32,-41,60,-28,-18,68,61,-95,95,-70,-70,-119,35,122,60,82,68,94,60,52,39,-54,-67,74,-99,12,-67,-86,-29,46,-68,89,20,-65,61,-23,-2,-73,-67,116,113,35,59,-70,80,5,-66,-2,-100,4,-66,-98,31,-50,59,90,63,-68,61,-118,64,-17,61,-123,-45,64,60,-84,-11,35,-68,-53,-77,46,61,-28,116,26,-67,97,-61,-63,-70,30,82,8,61,-9,104,16,-67,-121,-114,85,61,-76,-22,-92,-69,23,48,-101,-67,-15,122,-106,60,-107,-70,91,61,107,98,-96,60,-2,-45,-91,-68,42,29,8,-67,52,-67,0,60,-127,5,-105,60,-119,-64,-20,61,-22,49,100,61,8,12,-112,61,50,-54,26,-67,-107,54,25,-67,-47,-45,-43,61,-108,-24,-54,59,-110,121,27,59,15,88,-110,60,69,73,29,61,116,-27,-27,-68,95,119,-109,61,16,-20,-74,-71,-108,-60,55,-68,78,-54,-80,-69,97,57,22,-66,42,96,-89,60,64,78,-95,-67,116,-53,-88,61,-64,43,-82,61,68,-61,18,62,124,75,54,-67,22,113,-21,-68,37,-22,-126,61,55,-90,69,60,-5,-84,59,61,-74,90,109,-67,-9,87,-51,-71,6,85,20,62,96,51,83,-67,-7,-88,-91,60,-41,-3,6,60],\"imagePath\":\"/storage/emulated/0/Android/data/com.arcsoft.arcfacedemo/files/Pictures/faceDB/registerFaces/1603334706691_1603334706882.jpg\",\"registerTime\":1603334706895,\"userName\":\"种田梨莎\"},{\"faceId\":3,\"featureData\":[0,-128,-6,68,0,0,-96,65,-92,-60,27,61,-15,-76,-110,-68,-46,101,59,-67,-79,3,-94,-67,-101,-71,-42,60,-115,127,-92,-67,-103,102,124,-67,-5,-80,0,-67,-32,-79,-18,59,-75,-67,-5,-70,119,-81,-90,-69,-114,-108,118,-67,-32,19,87,-67,-19,105,-104,-67,84,5,48,61,17,-107,-79,59,110,28,75,-67,38,107,16,57,81,48,43,-67,57,7,116,-68,-128,-114,116,-67,-116,-45,-53,-68,-37,10,84,-68,-128,16,115,-68,58,87,-90,-68,-61,-67,-76,-67,-86,-82,127,-68,44,67,-120,-67,50,-79,-16,-67,121,-91,120,61,-46,36,-16,60,7,18,-66,61,22,115,121,61,-68,35,21,-68,96,85,67,61,78,-42,74,61,13,16,74,61,66,94,-92,61,68,47,-124,-68,-84,-123,23,-67,-52,53,50,61,-71,-67,-61,61,126,-106,-120,61,13,65,-119,61,-10,86,1,-66,-16,-108,-122,-67,82,17,-26,60,91,-12,-100,61,78,29,115,-67,41,-31,-128,60,107,12,18,58,23,72,97,-67,37,37,16,62,96,-109,56,-68,-116,8,63,61,53,125,-35,-67,-58,-90,-108,-67,80,78,-117,60,-15,-76,119,-67,-75,-93,-126,-67,96,65,-121,-68,79,-91,28,62,115,-54,-44,59,84,39,72,61,90,-19,36,62,76,-45,77,-67,25,-57,-60,-67,97,25,-12,61,21,78,60,-67,32,79,53,-67,-71,0,-59,61,19,-29,-87,-67,-68,-56,28,61,-9,-41,-3,59,-42,-27,61,-67,28,-94,-77,-67,42,-32,-12,61,98,-108,-120,59,-117,24,-113,-67,47,1,-46,60,-128,-78,-65,-67,-52,25,-57,-68,69,-66,27,60,16,-96,-31,60,76,28,-43,-67,-80,-4,-58,60,7,44,10,62,-50,-57,3,62,-37,72,7,-68,-63,2,-69,-67,-27,-36,-75,61,112,-49,64,-67,117,-5,61,61,-54,11,-33,60,91,-30,-115,-70,50,15,-47,61,-1,-115,110,60,-124,49,-63,61,-68,-90,-41,61,-68,-87,17,62,-124,71,-14,-68,74,-114,23,-68,85,97,-104,61,-48,101,-61,-67,60,65,53,61,-96,-25,-102,61,83,12,7,59,-126,84,91,61,50,-54,-4,60,-109,63,13,62,-85,67,-108,-67,114,-99,-48,-67,-74,55,122,61,-11,19,21,-67,71,-46,-73,60,117,107,-110,60,36,-20,-53,59,28,92,-116,-67,12,-31,78,-67,100,-103,101,61,-93,84,-20,-67,-92,-108,106,60,85,103,-49,-70,-46,-1,110,61,-128,-74,-109,-68,123,41,31,61,-48,-109,-68,61,21,86,4,61,25,37,-115,58,-15,41,3,62,66,-97,-71,-67,-114,-10,-40,-67,-123,-21,105,-68,-123,31,-36,61,-98,-2,77,-68,121,114,-121,57,34,100,-56,60,95,-18,27,60,-118,-92,-4,60,-46,-123,-127,60,4,-45,45,-67,87,-68,109,-68,-111,-65,-44,-68,3,123,71,61,-71,-11,-125,60,-28,-37,3,62,34,-70,-123,-67,119,27,-59,-68,-5,-102,72,61,20,26,-128,-67,87,-87,5,-67,28,-74,69,61,-34,-122,-85,-68,33,-119,121,61,-41,20,115,-68,-124,28,-7,-68,-13,-111,20,61,-39,58,41,61,38,112,-1,-67,-10,81,118,59,-53,56,29,61,-60,37,16,-68,119,98,-75,-67,-9,-124,-32,60,87,76,26,-67,-99,78,-114,-68,80,98,-110,-68,65,63,-116,-67,45,-109,89,61,127,68,-111,-67,65,-117,64,-67,51,-77,76,-68,69,98,-67,61,54,27,-80,58,-7,-24,-104,-69,35,-23,20,-67,113,27,-116,-68,54,-38,10,-67,-83,64,77,60,-30,107,-80,-71,-111,-123,-114,60,-73,94,27,60,-99,-29,2,-66,-5,-83,-98,61,32,9,48,61,34,-110,-54,60,80,-55,6,62,1,34,20,61,-15,-62,14,61,-68,-21,-53,60,109,0,-61,-68,-86,-16,99,-67,-70,5,-41,61,-97,77,127,61,-14,87,-118,60,3,-66,-105,-67,63,-96,-95,-68,-14,-39,-88,-67,-39,86,-64,60,-78,-69,79,61,-84,-92,-72,60,6,-79,-99,60,107,-43,-10,60,-126,56,-102,61,-118,72,54,-66,-76,45,23,61,-49,4,35,61,100,-36,0,-67,-80,-125,-4,-67,101,82,-2,-68,-32,111,-87,-67,-52,-104,51,61,14,102,-47,61,-93,-100,105,-67,19,18,91,-68,31,-105,-122,60,-69,2,93,-69,-36,-6,-24,-69,-27,-53,89,-66,-110,-113,-78,61,-69,-47,-106,-67,36,-82,27,-67,90,58,114,-67,-38,-114,54,-66,64,-62,13,61,98,-53,-114,-67,-115,-40,-92,-67,-7,4,82,-68,-62,57,-42,60,-84,-37,-33,59,52,1,-70,-67,-1,-6,-125,-67,126,8,18,61,-4,-4,-122,-68,-66,7,-71,-67,-83,92,124,61,-42,57,101,61,4,-55,-91,-68,-124,70,-9,-71,-9,125,-38,61,-52,66,49,61,-92,83,1,61,-23,101,4,60,-39,58,-124,-68,-73,11,-124,61,-112,-60,-58,60,49,79,-74,-67,108,126,-49,-67,86,-68,60,61,-43,23,28,61,119,85,62,-68,35,-33,-99,61,-93,-56,89,61,-20,-92,69,-68,75,124,57,-67,-95,39,21,-67],\"imagePath\":\"/storage/emulated/0/Android/data/com.arcsoft.arcfacedemo/files/Pictures/faceDB/registerFaces/registered_70_1603867852097.jpg\",\"registerTime\":1603867852109,\"userName\":\"超超超\"},{\"faceId\":4,\"featureData\":[0,-128,-6,68,0,0,-96,65,-82,77,73,-67,92,-70,-13,-67,89,-46,-100,60,113,65,122,-67,-96,44,43,-67,113,-42,-87,61,1,-107,-51,58,42,-109,-57,-69,46,-28,-112,-67,-67,32,-120,61,50,31,105,62,-55,10,57,-67,66,-47,47,61,46,-41,-90,-68,-75,78,-50,-69,-52,-126,-75,60,-7,75,-26,58,120,-38,44,-67,5,-42,-19,-68,47,42,-114,59,-91,125,-67,61,-10,-29,67,-67,-7,24,-85,-69,-114,-25,126,60,98,125,-92,60,40,74,-104,60,-33,-58,70,59,89,-125,35,61,92,53,-58,59,-62,-108,-73,61,-128,122,107,59,57,-49,-60,59,77,-116,117,61,18,4,-113,-67,-58,49,80,61,32,43,-85,60,113,3,4,62,-34,-113,-72,61,-71,-26,82,-68,-71,-50,-67,61,57,-34,-48,61,115,-4,-38,-67,15,-57,-59,59,-106,-23,-120,-68,-110,50,18,61,35,-19,-56,-67,-78,22,44,60,-15,-127,0,61,-63,85,66,61,-101,68,-42,-68,80,-21,-128,-67,-22,-12,88,59,-9,-76,38,62,17,-126,-104,61,-3,-1,-26,59,29,-59,125,61,88,116,-62,-67,-118,36,-10,-68,63,0,2,60,-111,-21,106,60,-4,46,107,-67,-97,16,54,-68,37,9,43,-67,-85,113,68,-67,33,78,-37,-69,-57,116,120,60,-34,7,39,61,18,65,12,-66,-21,88,-15,-69,82,103,26,60,-122,-24,-72,59,-48,125,8,60,-30,-122,53,61,80,126,-52,60,36,21,83,-69,-89,-16,116,61,-92,-128,-2,-67,20,43,-49,-68,-124,-34,117,61,-38,40,106,59,65,122,104,-67,-116,80,-17,59,-71,36,-8,61,83,-74,-76,61,100,97,31,60,-63,-12,83,-67,95,67,58,61,-4,76,51,61,5,-75,-75,59,-124,-38,10,62,89,126,114,-67,46,55,48,61,-42,78,80,-68,55,-103,21,61,-103,44,-58,-69,-2,80,-60,-67,23,101,-44,61,77,19,6,61,114,-42,-8,61,48,-36,3,62,-119,13,96,60,20,23,100,60,-27,-51,-97,60,106,-66,110,-67,-112,-128,-73,60,45,-94,-41,-67,124,-82,113,-67,25,24,81,61,102,103,-121,61,124,44,-50,60,3,73,7,61,21,-10,5,61,112,19,-102,60,78,52,4,61,7,118,-48,61,-74,38,-111,-67,-122,123,48,61,72,11,-32,61,-25,95,-39,-68,78,58,80,61,78,-116,-28,-68,-14,70,-110,-67,118,-22,1,62,79,-111,124,60,40,-28,0,61,87,16,-10,60,25,-111,-30,-67,1,-68,11,62,-80,40,-9,-67,-44,-49,57,60,-86,44,-36,60,-39,49,101,-67,15,124,-83,-67,119,-18,58,61,23,41,-118,61,90,-127,-120,-67,-97,43,-3,-67,-44,75,-42,61,-34,115,20,61,-113,119,-94,61,29,103,-19,-68,-70,73,103,-68,13,107,-127,61,-125,74,-93,-68,-58,110,2,60,-72,-109,35,-67,-91,-112,-91,-67,122,-105,-117,-69,29,-57,-119,-67,37,5,-94,-68,-93,6,-125,-67,44,-100,6,-66,45,-13,-51,61,-109,-17,125,-67,61,-95,-12,60,-7,-93,38,-67,-60,16,-10,-69,-122,9,-14,60,-80,74,-128,61,-103,19,53,61,113,-113,78,60,-114,-80,86,61,-11,114,-34,-69,11,-52,-125,61,50,42,-26,-68,-114,81,41,61,-55,63,-122,61,-87,43,-97,61,-100,-104,-96,-69,124,30,-6,-69,-37,30,118,-67,-86,-58,-21,60,94,-99,-99,-69,26,109,43,59,-33,12,16,-66,-84,50,70,-67,54,-23,-128,-68,25,56,-2,-68,36,-114,44,60,-111,-103,-106,-67,-23,11,0,-66,50,82,6,-66,44,103,-118,60,115,58,-93,61,-38,-43,-117,-68,100,-73,-116,60,65,42,-5,-67,127,-57,-122,-67,-76,-93,51,-67,-112,-107,25,-66,-119,102,-96,-68,-35,5,-94,-67,-125,19,-7,-67,18,21,28,-67,-32,49,80,61,36,30,-128,60,-8,-6,54,-67,-102,112,-85,61,119,104,-126,61,8,-123,2,-67,-70,-103,-34,-68,63,88,-87,-67,4,73,-53,-68,-44,26,27,61,6,26,-115,61,2,-75,-14,-68,55,25,-1,-67,0,89,-72,-69,-123,14,92,60,61,48,9,-68,74,-95,84,61,-12,-82,-113,-69,29,82,-123,-67,-43,9,39,62,50,-62,43,-67,-61,-67,-84,-67,107,-12,120,-67,-54,23,18,-71,-109,70,-101,60,-63,9,9,62,105,122,111,-67,91,-44,78,61,15,121,-122,60,-79,-115,-38,-68,95,118,-124,-67,-32,8,35,-66,80,9,109,59,-22,99,104,-67,-72,37,-101,60,-127,56,-121,60,-19,24,84,61,-124,39,-35,61,-69,8,-25,-67,115,3,28,-67,-8,63,-110,60,71,-123,89,-69,-16,-67,48,61,54,25,50,62,-100,-78,-55,-68,76,18,26,-67,66,-127,57,61,-66,50,-82,-67,-37,-54,2,-67,-77,-12,-48,-67,79,19,-42,-69,19,1,-13,-68,-85,-2,36,-67,49,124,-24,-67,5,4,19,61,-33,-97,-48,58,114,22,-115,-67,-32,52,-75,-68,72,94,-127,61,67,1,64,-67,-92,46,7,-67,-84,-49,-53,61],\"imagePath\":\"/storage/emulated/0/Android/data/com.arcsoft.arcfacedemo/files/Pictures/faceDB/registerFaces/registered_21_1606288283684.jpg\",\"registerTime\":1606288283748,\"userName\":\"1812211201\"},{\"faceId\":6,\"featureData\":[0,-128,-6,68,0,0,-96,65,-80,-48,-83,61,-105,-71,-29,-67,31,84,-92,-67,92,48,8,-67,-84,107,2,61,-57,125,29,61,96,-84,-63,61,-126,126,82,-67,26,-51,115,61,17,109,-103,60,65,-115,126,60,58,-93,-88,-67,105,-38,-87,-67,29,26,-22,61,83,48,-1,-67,5,42,56,-67,22,41,90,61,109,-45,9,-67,64,-91,-3,61,118,-24,-73,61,-91,-45,-104,60,-30,91,-42,60,-39,118,3,60,-116,32,73,-67,-82,78,7,-67,4,27,-17,61,116,2,-108,-67,-74,-60,-70,-69,123,-91,-128,61,119,-94,-68,-68,-54,26,20,-67,-114,30,19,-66,-56,-49,86,61,-8,-126,-2,60,-85,-122,45,61,-115,-126,-111,61,-46,-111,-54,61,-63,-60,-94,61,74,124,47,-68,37,-32,44,61,17,-68,-116,-67,-78,-114,-1,61,-66,30,-92,61,-115,111,-110,-71,-56,-92,47,61,-109,33,-52,59,-110,-1,-49,58,46,-85,36,-67,50,6,-40,60,50,-122,-28,61,61,55,-113,60,-88,-29,77,-67,26,-26,-91,-68,104,-117,-128,60,114,-36,-117,-68,-37,61,-28,60,64,-106,120,-68,75,58,22,-67,-39,-101,-2,-68,-89,121,-79,-67,112,-110,-113,59,-128,-121,-79,-67,123,0,-79,-67,4,-23,-66,61,97,-114,1,-66,-27,81,-81,-69,-21,-117,13,-67,-36,69,-125,-67,19,-98,-47,61,-121,59,-20,-68,-7,-17,18,61,-113,-43,15,-69,-84,-27,8,61,13,-33,60,61,-27,105,-64,60,-92,-124,-101,-68,28,-109,45,60,52,124,-115,-68,-87,23,-93,61,56,-114,-25,-67,-114,31,101,59,-11,-23,22,-69,76,7,112,58,81,11,14,-67,-124,-128,118,61,-90,61,97,61,-60,-79,61,61,-119,-119,-110,61,-65,-105,-68,61,84,-93,-97,61,-115,-40,-36,-67,-15,70,69,-67,-20,-75,28,-67,58,-121,-49,60,-5,-66,98,61,12,-116,-94,-67,3,-46,-93,60,124,42,-79,61,-92,84,-29,-68,117,-63,108,-69,20,38,-77,-69,-87,21,76,-67,121,63,25,61,84,-30,-87,59,24,-65,72,57,92,-79,3,-68,59,-12,20,60,57,42,-8,-67,12,34,-124,61,36,5,21,62,100,-96,20,-67,39,-42,45,-67,-44,-104,-121,61,7,64,97,-67,-23,-114,-69,61,-32,29,48,-67,62,20,57,62,-66,-122,-50,-69,8,-7,-80,-67,112,90,111,61,-118,72,-83,60,103,44,70,-70,-34,83,-93,-67,19,43,112,60,113,95,-47,-67,-14,-41,5,-68,103,31,-18,-67,69,-103,26,62,117,56,25,-67,100,5,29,61,89,-45,-122,-67,-2,-111,17,-66,-39,24,-102,61,123,-59,117,-69,91,-39,-72,60,59,114,-22,-69,-15,-122,-106,-67,-12,84,-116,60,-55,117,-46,61,38,63,-2,61,102,-76,18,-67,88,80,81,61,56,51,-119,61,116,47,74,61,-92,82,118,61,0,-54,110,-67,-2,27,-36,60,-46,83,53,60,-77,72,16,59,-101,46,-128,-67,110,1,-118,-69,-90,-15,74,-67,55,-96,21,-67,81,127,4,61,-14,-42,39,-67,1,103,-97,60,84,0,40,-68,-25,10,54,-67,-122,9,29,-67,82,116,-126,-67,103,50,-119,61,28,-58,-65,-69,-126,-125,-95,60,111,116,60,-67,-36,-105,81,61,-61,53,91,61,-71,87,16,-68,44,-46,-84,-67,-70,-90,-24,61,86,-105,33,-66,107,-52,37,-67,4,-92,5,61,-77,8,45,-68,-108,-106,-86,-71,-8,95,39,61,18,-63,-71,-67,82,-116,-13,58,98,-51,73,61,-106,103,-61,-67,80,-32,-71,60,-40,71,96,61,-77,82,81,-68,60,-55,-124,61,55,-8,-119,61,-106,-35,61,-67,92,112,-59,61,52,-74,-63,-67,-9,57,99,61,117,55,-116,60,-103,-98,-30,60,15,-32,12,60,17,119,15,61,76,-45,77,61,-30,52,35,59,-31,52,-102,-67,-15,27,-18,-67,9,93,21,-69,-116,-47,47,61,-112,-121,-52,-67,-86,81,-38,57,-46,-120,-72,-68,-44,-105,69,-67,57,89,-114,-67,-54,43,85,60,-56,69,-92,61,115,89,-93,-68,101,95,-41,-67,-32,84,-108,61,-23,-75,-58,-67,115,78,-54,-67,78,68,88,-68,-5,18,94,61,33,-94,-75,-67,-20,58,69,61,39,-43,-50,-67,-114,-20,105,-67,-48,114,73,61,102,-42,126,-67,127,19,4,62,95,-17,3,59,-46,115,-75,61,14,42,45,-68,-26,95,-93,-67,76,2,-50,-68,-124,-49,22,-66,-99,107,112,61,101,-41,-113,-68,-6,102,-78,-68,127,120,-63,-68,-10,0,28,62,-10,-45,-99,60,89,-68,-55,60,-114,65,-124,61,76,-26,31,61,-78,77,66,61,-89,8,-122,60,76,124,-123,-67,27,26,72,-67,126,-43,-126,60,-57,-108,-111,61,-41,-97,88,-67,32,-108,-107,61,-123,3,-48,-67,33,101,89,60,-41,126,-127,61,91,-73,-63,61,-97,-16,6,62,-51,69,-116,60,33,-90,4,61,-34,-125,-8,-68,18,35,31,-67,-48,75,42,61,-26,100,-106,-68,-102,-26,15,-69,-111,-52,46,-68,-32,75,-102,61],\"imagePath\":\"/storage/emulated/0/Android/data/com.arcsoft.arcfacedemo/files/Pictures/faceDB/registerFaces/registered_23_1606288291272.jpg\",\"registerTime\":1606288291333,\"userName\":\"1712212124\"},{\"faceId\":10,\"featureData\":[0,-128,-6,68,0,0,-96,65,-58,-4,5,-69,77,-85,34,61,-69,102,-65,-67,32,12,-56,60,-113,-107,11,61,21,39,76,-68,-38,22,-37,-68,15,-40,38,-68,43,-127,49,59,-47,-106,113,-68,5,76,110,-68,-93,-51,84,61,-43,-104,102,-67,74,113,24,61,-47,117,-41,-70,112,-13,-76,-68,-20,-79,44,60,-95,-62,91,61,83,-20,-24,-68,94,28,57,61,-32,101,21,-67,28,124,-28,60,-23,120,49,61,93,28,41,-67,19,57,21,61,-6,44,-72,59,41,36,-123,-71,44,1,-27,-68,55,-126,84,61,-97,-31,-2,-67,-63,-1,-126,61,-94,-1,-19,61,23,85,-28,-67,125,116,12,-67,-44,-39,18,-67,48,-111,-119,-68,77,67,-25,-68,-14,-26,36,62,33,71,-64,61,87,-80,28,-66,-21,-85,-102,-69,42,-73,-107,61,-3,121,83,60,-86,117,52,61,105,7,-63,58,122,95,-80,-67,23,-7,-33,61,-29,51,122,-68,62,27,127,-67,-66,-80,81,61,105,-84,11,60,-62,104,24,-66,-36,76,-24,-67,-105,-42,-119,-68,-35,98,28,61,-28,91,76,61,15,35,-19,61,-70,8,-112,60,-27,27,116,61,-91,118,55,59,15,-67,45,-67,0,104,-85,-68,-42,-76,-70,-68,64,-84,-60,-67,-91,49,4,60,43,-29,-16,60,9,-25,19,62,9,-57,122,61,2,-81,88,-68,-43,-87,-61,-71,-102,6,123,-67,44,45,71,61,-64,-56,11,62,49,13,-120,61,109,38,-75,-69,-106,1,28,-67,125,91,-99,61,118,59,-91,-67,-82,123,62,-67,32,29,-104,61,-37,-74,71,61,-29,-83,-77,-68,103,-75,-121,-67,117,108,64,61,-55,66,35,-67,-103,23,-126,61,-110,59,-115,-67,18,-1,22,62,9,90,7,61,113,-106,-102,61,-48,85,22,-66,-35,108,-28,61,4,-110,-93,-68,-89,-22,-110,61,28,8,-111,61,-6,38,-13,-68,12,-22,-100,-67,39,-30,-1,-68,98,24,-115,-67,118,-51,107,60,18,70,106,60,-116,17,-80,-67,83,-17,-62,-68,-12,118,30,-67,47,97,38,-66,-41,65,-74,60,-95,47,122,61,-57,-77,-96,61,-90,-10,-66,-67,14,16,89,61,-36,-119,-79,-67,-35,55,-92,-68,-43,-10,101,-67,12,-57,109,-68,-52,-78,75,62,25,111,120,61,112,-45,-89,-68,-117,-60,-87,59,-127,-56,55,60,-91,83,67,61,47,-124,51,-69,-12,-8,-106,-67,121,53,-84,60,-100,59,55,-68,-32,-23,65,-68,-60,-10,6,-66,64,-41,35,-66,-50,-58,64,62,-81,-35,-63,60,-77,117,59,61,55,117,-83,-69,-55,-83,115,-67,81,46,-108,61,33,102,-60,60,54,81,-118,-67,-106,121,7,60,94,9,23,-67,-55,31,40,-71,-83,4,9,-67,-61,63,-36,59,-96,59,64,-67,-60,48,-46,-69,31,96,79,-67,38,85,42,-67,31,95,37,-67,-32,44,101,61,13,99,24,60,-13,11,116,-67,117,-117,-51,61,47,-48,12,-67,-111,106,13,-66,78,-54,121,61,69,-33,22,-68,35,17,-43,-67,50,-38,21,-67,-123,2,88,-67,65,14,-120,-68,27,-108,-35,61,60,109,8,-67,-107,80,37,61,81,24,23,-67,-82,-114,-105,61,103,-97,-7,-69,53,-2,-12,61,2,-62,60,-67,14,-72,-125,61,-15,-11,11,60,113,-74,-92,-68,-12,21,48,-67,90,-128,-123,-67,-127,-9,-74,61,-115,85,82,61,81,-115,34,61,-101,-21,86,-68,25,-23,-20,-68,81,-92,-51,61,39,-86,57,59,-76,73,14,58,68,75,-101,60,106,-93,-71,-68,-103,8,37,60,56,-30,-124,61,-54,75,90,-68,-17,28,-115,60,18,100,-20,61,-116,-81,69,61,-79,79,-127,61,-109,8,126,61,-62,-55,-102,-68,-96,17,-39,-68,-1,52,-67,60,90,-81,-103,-68,121,87,7,61,-41,-83,-81,60,-99,-110,57,61,31,55,101,-67,-85,-123,-14,-68,21,-119,-85,-67,-96,-1,-75,-67,82,119,-57,-67,9,-95,-81,60,55,-45,106,-67,-67,-111,-76,-67,-69,93,93,61,94,68,80,-67,-22,48,-17,-68,57,-115,-76,61,-37,-30,35,-68,71,-48,22,61,48,-12,-17,-67,59,-98,23,-69,46,-40,122,-67,6,-1,14,60,-2,41,-11,-67,-89,101,-62,61,80,44,-55,-68,-41,73,61,61,27,55,80,-68,-43,-4,114,60,115,72,70,61,-17,-124,83,-68,-95,-18,-46,61,-26,-35,116,-68,68,-17,-13,-67,30,97,-123,-67,93,-90,4,60,119,-56,11,61,53,12,26,62,20,-113,-92,61,11,-114,26,59,-73,125,-28,61,-125,-108,46,-68,-39,96,-113,61,57,107,33,61,53,-118,-94,-67,-65,108,-82,61,-33,50,-68,60,-106,91,113,61,114,-7,-99,-68,6,-7,-111,-67,-36,20,-38,61,100,-117,19,61,-113,38,-49,61,51,61,-61,-67,-93,99,92,-67,-51,-1,-86,61,-66,16,24,-67,-82,65,-53,61,74,-74,78,61,-39,-49,-33,-67,-50,41,0,61,92,-104,65,-67,-50,69,-125,61,-21,-98,-79,-67,-23,-90,-113,60,19,-82,34,61],\"imagePath\":\"/storage/emulated/0/Android/data/com.arcsoft.arcfacedemo/files/Pictures/faceDB/registerFaces/registered_79_1607926601818.jpg\",\"registerTime\":1607926601946,\"userName\":\"510121524585\"}]";
        List<TempFaceEntity> list = EX_Json.jsonToList(jk, TempFaceEntity.class);
        if (list != null) {
            Calendar calendar = Calendar.getInstance();
            for (int i = 0; i < list.size(); i++) {
                try {
                    TempFaceEntity entity = list.get(i);
                    FaceEntity js = new FaceEntity(entity.getUserName(), entity.getFeatureData(), calendar.getTimeInMillis());
                    FaceDatabase.getDatabase(context).faceDao().insert(js);
                } catch (Exception e) {
                    Log.e("Exception", e.getMessage());
                }
            }
//            LitePal_MsArc.GetSingleton().LitePal_Insert_SyncFace(addFace);
            FaceDatabase.getDatabase(context).faceDao().getAllFaces();
        }
    }

    //endregion

    /**
     * 初始化摄像头
     *
     * @param cameraType 要初始化的摄像头类型
     * @param
     * @see #CameraType_RGB RGB摄像头
     * @see #CameraType_IR IR摄像头
     */
    public void initCamera(int cameraType, boolean switchCameraFrame) {
        if (cameraType == CameraType_RGB) {
            initRbgCamera(switchCameraFrame);
        }
        if (cameraType == CameraType_IR) {
            initIrCamera();
        }
    }

    /**
     * 初始化虹软识别引擎
     */
    public void initArcEngine(int livenessType, IInitEngineCallback ftInitCallback, IInitEngineCallback frInitCallback, IInitEngineCallback flInitCallback) {
        this.livenessType = livenessType;
        new Thread() {
            @Override
            public void run() {
                super.run();
                initEngine(ftInitCallback, frInitCallback, flInitCallback);
                initCamera(MsArcCamera.CameraType_RGB, false);
            }
        }.start();
//        initEngine(ftInitCallback, frInitCallback, flInitCallback);
    }

    private void initRbgCamera(boolean switchCameraFrame) {
        switchCamera = switchCameraFrame;
        rgbCameraHelper = new DualCameraHelper.Builder()
                .previewViewSize(new Point(this.tv_RGB.getMeasuredWidth(), this.tv_RGB.getMeasuredHeight()))
                .rotation(GetWindowManager().getDefaultDisplay().getRotation())
                .additionalRotation(previewConfig.getRgbAdditionalDisplayOrientation())
//                .previewSize(LoadPreviewSize())//设置默认预览高度，支持的话，则会默认采用该分辨率
                .specificCameraId(previewConfig.getRgbCameraId())
                .isMirror(!switchCamera)
                .previewOn(this.tv_RGB)
                .cameraListener(cameraListener)
                .build();
        mHandler.sendEmptyMessage(CAMERA_START);

    }

    /**
     * 初始化红外相机，若活体检测类型是可见光活体检测或不启用活体，则不需要启用
     *
     * @implNote tv_IR ,rv_IR 已被注释，无法使用，为了防止View覆盖看不到RGB的View展示
     */
    private void initIrCamera() {
//        if (livenessType == LivenessType.RGB || !enableLivenessDetect) {
        if (livenessType == LivenessType.RGB) {
            return;
        }
        ICameraListener irCameraListener = new ICameraListener() {
            @Override
            public void onCameraOpened(Camera camera, int cameraId, int displayOrientation, boolean isMirror) {
                Camera.Size previewSizeIr = camera.getParameters().getPreviewSize();
                ViewGroup.LayoutParams layoutParams = AdjustPreviewViewSize(
                        tv_IR, rv_IR,
                        previewSizeIr, displayOrientation, 1.0f);

                irFaceRectHelper = new FaceRectHelper(previewSizeIr.width, previewSizeIr.height,
                        layoutParams.width, layoutParams.height, displayOrientation, cameraId, isMirror,
                        true, true);

                Camera.Size lastPreviewSize = previewSize;
                previewSize = camera.getParameters().getPreviewSize();
                // 切换相机的时候可能会导致预览尺寸发生变化
                InitFaceHelper(lastPreviewSize);
                faceHelper.setIrFaceRectTransformer(irFaceRectHelper);
            }


            @Override
            public void onPreview(final byte[] nv21, Camera camera) {
                rv_IR.clearFaceInfo();
                RefreshIrPreviewData(nv21);
                List<FacePreviewInfo> facePreviewInfoList = OnPreviewFrame(nv21, true);
                if (facePreviewInfoList != null && irFaceRectHelper != null) {
                    DrawPreviewInfo(facePreviewInfoList);
                }
            }

            @Override
            public void onCameraClosed() {
//                Log.i(TAG, "onCameraClosed: ");
            }

            @Override
            public void onCameraError(Exception e) {
//                Log.i(TAG, "onCameraError: " + e.getMessage());
                e.printStackTrace();
            }

            @Override
            public void onCameraConfigurationChanged(int cameraID, int displayOrientation) {
                if (irFaceRectHelper != null) {
                    irFaceRectHelper.setCameraDisplayOrientation(displayOrientation);
                }
//                Log.i(TAG, "onCameraConfigurationChanged: " + cameraID + "  " + displayOrientation);
            }
        };
        irCameraHelper = new DualCameraHelper.Builder()
                .previewViewSize(new Point(tv_IR.getMeasuredWidth(), tv_IR.getMeasuredHeight()))
                .rotation(GetWindowManager().getDefaultDisplay().getRotation())
                .specificCameraId(previewConfig.getIrCameraId())
                .previewOn(tv_IR)
                .cameraListener(irCameraListener)
                .isMirror(false)
                .previewSize(this.LoadPreviewSize()) //相机预览大小设置，RGB与IR需使用相同大小
                .additionalRotation(previewConfig.getIrAdditionalDisplayOrientation()) //额外旋转角度
                .build();
        irCameraHelper.init();
        try {
            irCameraHelper.start();
        } catch (RuntimeException e) {
        }
    }

    /**
     * 传入可见光相机预览数据
     *
     * @param nv21        可见光相机预览数据
     * @param doRecognize 是否进行识别
     * @return 当前帧的检测结果信息
     */
    public List<FacePreviewInfo> OnPreviewFrame(byte[] nv21, boolean doRecognize) {
        if (faceHelper != null) {
            if (livenessType == LivenessType.IR && irNV21 == null) {
                return null;
            }
            List<FacePreviewInfo> facePreviewInfoList = faceHelper.onPreviewFrame(nv21, irNV21,previewSize.width,previewSize.height, doRecognize);
            return facePreviewInfoList;
        }
        return null;
    }

    public Point LoadPreviewSize() {
        String sizeStr = "800x1280";
        String[] size = sizeStr.split("x");
        return new Point(Integer.parseInt(size[0]), Integer.parseInt(size[1]));
    }

    //endregion

    //region 虹软操作
    /**
     * 人脸操作辅助类，推帧即可，内部会进行特征提取、识别
     */
    private MsArcFaceHelper faceHelper;
    /**
     * VIDEO模式人脸检测引擎，用于预览帧人脸追踪及图像质量检测
     */
    private FaceEngine ftEngine;
    /**
     * 用于特征提取的引擎
     */
    private FaceEngine frEngine;
    /**
     * IMAGE模式活体检测引擎，用于预览帧人脸活体检测
     */
    private FaceEngine flEngine;

    /**
     * 相机预览的分辨率
     */
    private Camera.Size previewSize;
    /**
     * 当前活体检测的检测类型
     */
    private int livenessType;

    private PreviewConfig previewConfig;
    private RecognizeConfiguration recognizeConfiguration;
    /**
     * 最大的人脸识别数量
     */
    private static final int MaxDetectFaceNumber = DEFAULT_FACE_SIZE;

    private static final int MAX_DETECT_NUM = 10;


    /**
     * IR活体数据
     */
    private byte[] irNV21 = null;


    public void RefreshIrPreviewData(byte[] irPreviewData) {
        irNV21 = irPreviewData;
    }

    /**
     * 初始化
     *
     * @param lastPreviewSize
     */
    private void InitFaceHelper(Camera.Size lastPreviewSize) {
        if (faceHelper == null ||
                lastPreviewSize == null ||
                lastPreviewSize.width != previewSize.width || lastPreviewSize.height != previewSize.height) {
            Integer trackedFaceCount = null;
            // 记录切换时的人脸序号
            if (faceHelper != null) {
                trackedFaceCount = faceHelper.getTrackedFaceCount();
                faceHelper.release();
            }
            Context context = this.getContext().getApplicationContext();
//            int horizontalOffset = ConfigUtil.getDualCameraHorizontalOffset(context);
//            int verticalOffset = ConfigUtil.getDualCameraVerticalOffset(context);
//            int maxDetectFaceNum = ConfigUtil.getRecognizeMaxDetectFaceNum(context);
            faceHelper = new MsArcFaceHelper.Builder()
                    .ftEngine(ftEngine)
                    .frEngine(frEngine)
                    .flEngine(flEngine)
                    .frQueueSize(MaxDetectFaceNumber)
                    .flQueueSize(MaxDetectFaceNumber)
//                    .previewSize(previewSize)
                    .recognizeCallback(this)
                    .recognizeConfiguration(recognizeConfiguration)
                    .trackedFaceCount(trackedFaceCount == null ? 0 : trackedFaceCount)
                    .dualCameraFaceInfoTransformer(faceInfo -> {
                        FaceInfo irFaceInfo = new FaceInfo(faceInfo);
                        irFaceInfo.getRect().offset(0, 0);
                        return irFaceInfo;
                    })
                    .build();
        }
    }

    @Override
    public void onRecognized(boolean isHavePerson, CompareResult compareResult, Integer liveness, boolean similarPass) {
        //识别未查询到人脸
        if (recogniseCallback != null) {
            if (!isHavePerson) {
                recogniseCallback.onFaceFailed();
            } else {
                //如果通过识别阈值
                String userNum = compareResult.getFaceEntity().getUserNum();
                String userName = compareResult.getFaceEntity().getUserName();
                recogniseCallback.onFaceSuccess(compareResult.getTrackId(),
                        liveness == LivenessInfo.ALIVE,
                        userNum != null ? userNum : "",
                        userName != null ? userNum : "",
                        similarPass);
            }
        }
    }

    @Override
    public void onHaveNotFace() {
        recogniseCallback.onNotFindFace();
    }

    /**
     * 根据预览信息生成绘制信息
     *
     * @param facePreviewInfoList 预览信息
     * @return 绘制信息
     */
    public List<MsArcFaceRect.DrawInfo> GetDrawInfo(List<FacePreviewInfo> facePreviewInfoList, int livenessType) {
        List<MsArcFaceRect.DrawInfo> drawInfoList = new ArrayList<>();
        for (int i = 0; i < facePreviewInfoList.size(); i++) {
            int trackId = facePreviewInfoList.get(i).getTrackId();
            String name = faceHelper.getName(trackId);
            Integer liveness = faceHelper.GetLiveness(trackId);
            Integer recognizeStatus = faceHelper.GetRecognizeStatus(trackId);

            // 根据识别结果和活体结果设置颜色
            int color = RecognizeColor.Color_Unknown;
            if (recognizeStatus != null) {
                if (recognizeStatus == RequestFeatureStatus.FAILED) {
                    color = RecognizeColor.Color_Failed;
                }
                if (recognizeStatus == RequestFeatureStatus.SUCCEED) {
                    color = RecognizeColor.Color_Success;
                }
            }
            if (liveness != null && liveness == LivenessInfo.NOT_ALIVE) {
                color = RecognizeColor.Color_Failed;
            }

            drawInfoList.add(new MsArcFaceRect.DrawInfo(
                    livenessType == LivenessType.RGB ?
                            facePreviewInfoList.get(i).getRgbTransformedRect() :
                            facePreviewInfoList.get(i).getIrTransformedRect(),
                    GenderInfo.UNKNOWN, AgeInfo.UNKNOWN_AGE, liveness == null ? LivenessInfo.UNKNOWN : liveness, color,
                    name == null ? "" : name));
        }
        return drawInfoList;
    }

    /**
     * 初始化引擎
     */
    private void initEngine(IInitEngineCallback ftInitCallback, IInitEngineCallback frInitCallback, IInitEngineCallback flInitCallback) {
        Context context = this.getContext().getApplicationContext();
        Log.d("TAG_Identify", "init: initEngine 1: " + SystemClock.currentThreadTimeMillis());
        //查看虹软是否激活
        MsArcFaceServer.getInstance().initFaceEngine(context);
        Log.d("TAG_Identify", "init: initEngine 2: " + SystemClock.currentThreadTimeMillis());
        boolean switchCamera = true;
        previewConfig = new PreviewConfig(
                switchCamera ? Camera.CameraInfo.CAMERA_FACING_FRONT : Camera.CameraInfo.CAMERA_FACING_BACK,
                switchCamera ? Camera.CameraInfo.CAMERA_FACING_BACK : Camera.CameraInfo.CAMERA_FACING_FRONT,
                0,
                0
        );
        // 填入在设置界面设置好的配置信息
        boolean enableLiveness = true;
        boolean enableFaceQualityDetect = true;
        Log.d("TAG_Identify", "init: initEngine 2.1: " + SystemClock.currentThreadTimeMillis());
        RecognizeConfiguration configuration = new RecognizeConfiguration.Builder()
                .enableLiveness(enableLiveness)
                .enableImageQuality(enableFaceQualityDetect)
                .maxDetectFaces(DEFAULT_FACE_SIZE)
                .keepMaxFace(DEFAULT_MAX_FACE)
                .similarThreshold(0.80f)
                .imageQualityThreshold(0.35f)
                .livenessParam(new LivenessParam(0.50f, 0.70f))
                .build();
        Log.d("TAG_Identify", "init: initEngine 3: " + SystemClock.currentThreadTimeMillis());
        ftEngine = new FaceEngine();
        int ftEngineMask = FaceEngine.ASF_FACE_DETECT;
        if (enableFaceQualityDetect) {
            ftEngineMask |= FaceEngine.ASF_IMAGEQUALITY;
        }
        int ftInitCode = ftEngine.init(context, DetectMode.ASF_DETECT_MODE_VIDEO, DetectFaceOrientPriority.ASF_OP_ALL_OUT,
                16, DEFAULT_FACE_SIZE * 2, ftEngineMask);
        if (ftInitCallback != null) {
            if (ftInitCode != ErrorInfo.MOK) {
                ftInitCallback.onFailed(ftInitCode);
            } else {
//                ftInitCallback.onSuccess();
            }
        }
        Log.d("TAG_Identify", "init: initEngine 3.1: " + SystemClock.currentThreadTimeMillis());
        frEngine = new FaceEngine();
        int frInitCode = frEngine.init(context, DetectMode.ASF_DETECT_MODE_IMAGE, DetectFaceOrientPriority.ASF_OP_0_ONLY,
                16, DEFAULT_FACE_SIZE * 2, FaceEngine.ASF_FACE_RECOGNITION);
        if (frInitCallback != null) {
            if (frInitCode != ErrorInfo.MOK) {
                frInitCallback.onFailed(frInitCode);
            } else {
//                frInitCallback.onSuccess();
            }
        }
        Log.d("TAG_Identify", "init: initEngine 3.2: " + SystemClock.currentThreadTimeMillis());
        // 启用活体检测时，才初始化活体引擎
        if (enableLiveness) {
            flEngine = new FaceEngine();
            int flInitCode = flEngine.init(context, DetectMode.ASF_DETECT_MODE_IMAGE, DetectFaceOrientPriority.ASF_OP_0_ONLY,
                    16, DEFAULT_FACE_SIZE * 2, livenessType == LivenessType.RGB ? FaceEngine.ASF_LIVENESS : FaceEngine.ASF_IR_LIVENESS);
            if (flInitCallback != null) {
                if (flInitCode != ErrorInfo.MOK) {
                    flInitCallback.onFailed(flInitCode);
                } else {
//                    flInitCallback.onSuccess();
                }
            }
        }
        Log.d("TAG_Identify", "init: initEngine 4: " + SystemClock.currentThreadTimeMillis());
        recognizeConfiguration = configuration;
    }

    //endregion

    private WindowManager GetWindowManager() {
        return ((WindowManager) this.getContext().getSystemService(Service.WINDOW_SERVICE));
    }


    public void updateFaceList(Context context) {
        if (rgbCameraHelper != null) {
            MsArcFaceServer.getInstance().getFaceNumber(context);
        }
    }


    private Handler mHandler = new Handler() {
        @Override
        public void handleMessage(Message msg) {
            super.handleMessage(msg);
            switch (msg.what) {
                case CAMERA_START: {
                    rgbCameraHelper.init();
                    rgbCameraHelper.start();
                }
                break;
                default:
                    break;
            }
        }
    };

    private ICameraListener cameraListener = new ICameraListener() {
        @Override
        public void onCameraOpened(Camera camera, int cameraId, int displayOrientation, boolean isMirror) {
            Camera.Size previewSizeRgb = camera.getParameters().getPreviewSize();
            ViewGroup.LayoutParams layoutParams = AdjustPreviewViewSize(
                    tv_RGB, rv_RGB,
                    previewSizeRgb, displayOrientation, 1.0f);
            rgbFaceRectHelper = new FaceRectHelper(
                    previewSizeRgb.width, previewSizeRgb.height,
                    layoutParams.width, layoutParams.height,
                    displayOrientation, cameraId,
                    isMirror, switchCamera, switchCamera);
            Log.i(TAG, "onCameraOpened: ");
            // 父View宽度和子View一致，保持居中
            ViewGroup.LayoutParams parentLayoutParams = MsArcCamera.this.getLayoutParams();
            parentLayoutParams.width = layoutParams.width;
            MsArcCamera.this.setLayoutParams(parentLayoutParams);
            // 切换相机的时候可能会导致预览尺寸发生变化
            Camera.Size lastPreviewSize = previewSize;
            previewSize = camera.getParameters().getPreviewSize();
            // 切换相机的时候可能会导致预览尺寸发生变化
            InitFaceHelper(lastPreviewSize);
            faceHelper.setRgbFaceRectTransformer(rgbFaceRectHelper);
        }

        @Override
        public void onPreview(final byte[] nv21, Camera camera) {
            rv_RGB.clearFaceInfo();
            //这是最开始拿取到人脸帧数据
            //将拿取到的帧数据，进行人脸识别
            List<FacePreviewInfo> facePreviewInfoList = OnPreviewFrame(nv21, true);
            if (facePreviewInfoList != null && rgbFaceRectHelper != null) {
                DrawPreviewInfo(facePreviewInfoList);//人脸框绘制
            }
        }

        @Override
        public void onCameraClosed() {
            Log.i(TAG, "onCameraClosed: ");
        }

        @Override
        public void onCameraError(Exception e) {
            Log.i(TAG, "onCameraError: " + e.getMessage());
            e.printStackTrace();
        }

        @Override
        public void onCameraConfigurationChanged(int cameraID, int displayOrientation) {
            if (rgbFaceRectHelper != null) {
                rgbFaceRectHelper.setCameraDisplayOrientation(displayOrientation);
            }
            Log.i(TAG, "onCameraConfigurationChanged: " + cameraID + "  " + displayOrientation);
        }
    };

    /**
     * 开启摄像头
     */
    public void resumeCamera() {
        Log.i(TAG, "resumeCamera: ");
        if (rgbCameraHelper != null) {
            rgbCameraHelper.start();
        }
        if (irCameraHelper != null) {
            irCameraHelper.start();
        }
    }

    /**
     * 暂停摄像头
     */
    public void pauseCamera() {
        Log.i(TAG, "pauseCamera: ");
        if (rgbCameraHelper != null) {
            rgbCameraHelper.stop();
        }
        if (irCameraHelper != null) {
            irCameraHelper.stop();
        }
    }

    public void destroy() {
        unInit();
        if (rgbCameraHelper != null) {
            rgbCameraHelper.release();
            rgbCameraHelper = null;
        }
        if (irCameraHelper != null) {
            irCameraHelper.release();
            irCameraHelper = null;
        }
        if (faceHelper != null) {
            faceHelper.release();
            faceHelper = null;
        }
    }

    public boolean isRGBDestroy() {
        return rgbCameraHelper == null;
    }

    /**
     * 销毁引擎，faceHelper中可能会有特征提取耗时操作仍在执行，加锁防止crash
     */
    private void unInit() {
        if (ftEngine != null) {
            synchronized (ftEngine) {
                ftEngine.unInit();
                ftEngine = null;
            }
        }
        if (frEngine != null) {
            synchronized (frEngine) {
                frEngine.unInit();
                frEngine = null;
            }
        }
        if (flEngine != null) {
            synchronized (flEngine) {
                flEngine.unInit();
                flEngine = null;
            }
        }

        MsArcFaceServer.getInstance().release();
    }
}
